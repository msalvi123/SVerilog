//vcs -licqueue '-debug_access+all' '-timescale=1ns/1ns' '+vcs+flush+all+v2k+memcbk+vcs+dumparrays+fsdb+mda=[on]' '+warn=all' '-sverilog' 'muxN.v' design.sv testbench.sv  && ./simv +vcs+lic+wait
					      
module muxN_tb();
  parameter WIDTH=8;
  parameter DATA_WIDTH = 4;
  parameter NUM_SEL = 2;
  parameter SIZE=$clog2(WIDTH);

  logic [WIDTH-1:0] req_in;
  logic [WIDTH-1:0] [DATA_WIDTH-1:0] data_in;
  logic [NUM_SEL-1:0][DATA_WIDTH-1:0] data_out;
  logic [NUM_SEL-1:0][WIDTH-1:0] req_out;
  logic [NUM_SEL-1:0]            req_sum;    
  logic [NUM_SEL-1:0][SIZE-1:0]  enc_req_out;
  logic clk;

  muxN muxN8by3(.*);
  initial begin
    clk = 0;
    $vcdpluson;
    $vcdplusmemon;
    $dumpfile("dump.vcd");
    $dumpvars(0,tb);

    repeat (10) begin 
      @ (negedge clk); 
      req_in = $random;
      for(int j=0;j<WIDTH;j++)
        data_in[j] = $random;
    end 
    @ (negedge clk);
    req_in = 3'b010;
    for(int j=0;j<WIDTH;j++)
        data_in[j] = $random;
    @ (negedge clk);
    req_in = 3'b110;
    for(int j=0;j<WIDTH;j++)
        data_in[j] = $random;
    
    $finish;
  end

  always #1 clk = ~clk;

endmodule
