//Mux module that takes in N requests and selects NUM_SELS muxed outputs,in any order(not strict priority).
//The left side of nodes at each level are default assigned, if the node happens to not have been set, then the nodes from
//right side are assigned starting from the lsb.
//Chose NUM_SEL out of WIDTH number of requestors.
//Also creates one hot version of chosen requests and encoded version of chosen requests.
//A full binary tree is created, if you dont need complete binary tree worth of inputs, pad the extra's to 0.

module muxN #(parameter WIDTH      = 8,              //Number of inputs.
	      parameter SIZE       = $clog2(WIDTH), //Log2 Number of inputs
              parameter DATA_WIDTH = 4,              //Width of data  
              parameter NUM_SEL    = 3)              //Number of muxed outputs   (	
 
   (input  [WIDTH-1:0]                         req_in,
    input [WIDTH-1:0] [DATA_WIDTH-1:0] 	       data_in,
   
    output logic [NUM_SEL-1:0] 		       req_sum,
    output logic [NUM_SEL-1:0][DATA_WIDTH-1:0] data_out,
    output logic [NUM_SEL-1:0][WIDTH-1:0]      req_out,
    output logic [NUM_SEL-1:0][SIZE-1:0]       enc_req_out);
   
   logic [SIZE:0][WIDTH-1:0][NUM_SEL-1:0][DATA_WIDTH-1:0] data_mux;
   logic [SIZE:0][WIDTH-1:0][NUM_SEL-1:0][WIDTH-1:0] 	  req_mux;
   logic [SIZE:0][WIDTH-1:0][NUM_SEL-1:0][SIZE-1:0] 	  enc_req_mux;
   logic [SIZE:0][WIDTH-1:0][NUM_SEL-1:0] 		  sum;
   logic 						  block;
   
   assign data_out   [NUM_SEL-1:0] = data_mux   [0][0][NUM_SEL-1:0];
   assign req_out    [NUM_SEL-1:0] = req_mux    [0][0][NUM_SEL-1:0];
   assign enc_req_out[NUM_SEL-1:0] = enc_req_mux[0][0][NUM_SEL-1:0];
   assign req_sum    [NUM_SEL-1:0] = sum        [0][0];  
   integer max_bkt_at_level,max_bkt_at_lower_level,NODE,LVL;
   
   //Initialize leaf's of tree to data_in
   always_comb begin
      data_mux    = '0;
      req_mux     = '0; 
      sum         = '0;
      enc_req_mux = '0;
      
      for(int i=0;i<WIDTH;i++) begin
        data_mux   [SIZE][i][0]            = data_in[i];
        req_mux    [SIZE][i][0][WIDTH-1:0] = req_in [i];
        sum [SIZE][i][0]                   = req_in [i];	
      end
 
      for(LVL=SIZE-1; LVL>=0; LVL--) begin
         for(NODE=0; NODE < 1 << LVL; NODE++) begin
	    //By default, pull up node values from the LOWER LEFT level up the tree.
	    max_bkt_at_level       = ((1 << SIZE-LVL)   >  NUM_SEL) ? NUM_SEL : (1 << (SIZE-LVL));
	    max_bkt_at_lower_level = ((1 << SIZE-LVL-1) >  NUM_SEL) ? NUM_SEL : (1 << (SIZE-LVL-1));
	    //might be only half as many, use the max from lower level
	    for(int bkt_upper=0; bkt_upper < max_bkt_at_lower_level; bkt_upper++) begin:BKT_DEF_UPPER
               sum        [LVL][NODE][bkt_upper] = sum        [LVL+1][2*NODE+1][bkt_upper];
               req_mux    [LVL][NODE][bkt_upper] = req_mux    [LVL+1][2*NODE+1][bkt_upper] << (1 << SIZE-LVL-1);
               data_mux   [LVL][NODE][bkt_upper] = data_mux   [LVL+1][2*NODE+1][bkt_upper];
	       enc_req_mux[LVL][NODE][bkt_upper] = enc_req_mux[LVL+1][2*NODE+1][bkt_upper] | 1'b1 <<(SIZE-1-LVL);
	    end
	    
	    for(int bkt_lower=0; bkt_lower < max_bkt_at_lower_level; bkt_lower++) begin:BKT_LOWER
	       block = 0;
	       for(int bkt_upper=bkt_lower; bkt_upper < max_bkt_at_level; bkt_upper++) begin:BKT_UPPER
		  if(~sum       [LVL][NODE][bkt_upper] & sum[LVL+1][2*NODE + 0][bkt_lower] & ~block) begin
		     req_mux    [LVL][NODE][bkt_upper] = req_mux    [LVL+1][2*NODE + 0][bkt_lower];
		     data_mux   [LVL][NODE][bkt_upper] = data_mux   [LVL+1][2*NODE + 0][bkt_lower];
		     enc_req_mux[LVL][NODE][bkt_upper] = enc_req_mux[LVL+1][2*NODE + 0][bkt_lower];
		     sum        [LVL][NODE][bkt_upper] = sum        [LVL+1][2*NODE + 0][bkt_lower];
		     block                             = 1'b1;
		  end
               end
            end			
         end		
      end
   end
endmodule
